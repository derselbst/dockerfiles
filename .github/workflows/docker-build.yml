name: Build Docker Images

# This workflow builds Docker images for each Dockerfile in the repository.
# It only runs when Dockerfile directories or related dependencies are changed.
# Built images are tagged with the commit SHA and pushed to the configured registry.

on:
  push:
    paths:
      - 'fluidsynth-devel'
      - 'qt6-dbg.suse'
      - 'qt6-kf6.ubuntu'
      - 'qt6.suse'
      - 'qt6.ubuntu'
      - 'qt6.win'
      - 'certs/**'
  pull_request:
    paths:
      - 'fluidsynth-devel'
      - 'qt6-dbg.suse'
      - 'qt6-kf6.ubuntu'
      - 'qt6.suse'
      - 'qt6.ubuntu'
      - 'qt6.win'
      - 'certs/**'

env:
  # Configure these variables/secrets to customize registry settings:
  # - DOCKER_REGISTRY: Registry URL (defaults to ghcr.io)
  # - DOCKER_USERNAME: Registry username (defaults to github.actor)
  # - DOCKER_PASSWORD: Registry password (required secret)
  REGISTRY: ${{ vars.DOCKER_REGISTRY || 'ghcr.io' }}
  REGISTRY_USERNAME: ${{ vars.DOCKER_USERNAME || github.actor }}
  REGISTRY_PASSWORD: ${{ secrets.DOCKER_PASSWORD || secrets.GITHUB_TOKEN }}

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      changed-dockerfiles: ${{ steps.changes.outputs.changed-dockerfiles }}
      matrix: ${{ steps.changes.outputs.matrix }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Detect changed Dockerfiles
        id: changes
        run: |
          # Define all Dockerfile directories
          DOCKERFILES=(
            "fluidsynth-devel"
            "qt6-dbg.suse"
            "qt6-kf6.ubuntu"
            "qt6.suse"
            "qt6.ubuntu"
            "qt6.win"
          )
          
          CHANGED_DOCKERFILES=()
          
          # Get list of changed files
          if git rev-parse HEAD~1 >/dev/null 2>&1; then
            CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
          else
            # First commit, build all
            CHANGED_FILES=$(echo "${DOCKERFILES[@]}" | tr ' ' '\n')
          fi
          
          echo "Changed files:"
          echo "$CHANGED_FILES"
          
          # Check for changes in each Dockerfile
          for dockerfile in "${DOCKERFILES[@]}"; do
            if echo "$CHANGED_FILES" | grep -E "^${dockerfile}$" > /dev/null; then
              CHANGED_DOCKERFILES+=("$dockerfile")
              echo "Direct change detected for: $dockerfile"
            fi
          done
          
          # Special case: if certs directory changed, rebuild qt6.win since it depends on it
          if echo "$CHANGED_FILES" | grep -E "^certs/" > /dev/null; then
            if ! printf '%s\n' "${CHANGED_DOCKERFILES[@]}" | grep -q "qt6.win"; then
              CHANGED_DOCKERFILES+=("qt6.win")
              echo "Certs changed, adding qt6.win to rebuild list"
            fi
          fi
          
          # Create JSON array for matrix strategy
          if [ ${#CHANGED_DOCKERFILES[@]} -eq 0 ]; then
            echo "changed-dockerfiles=[]" >> $GITHUB_OUTPUT
            echo "matrix={\"include\":[]}" >> $GITHUB_OUTPUT
            echo "No Dockerfiles to build"
          else
            # Convert to JSON array for changed-dockerfiles
            CHANGED_JSON=$(printf '"%s",' "${CHANGED_DOCKERFILES[@]}")
            CHANGED_JSON="[${CHANGED_JSON%,}]"
            echo "changed-dockerfiles=$CHANGED_JSON" >> $GITHUB_OUTPUT
            
            # Create matrix include array
            MATRIX_INCLUDE=""
            for dockerfile in "${CHANGED_DOCKERFILES[@]}"; do
              if [ -n "$MATRIX_INCLUDE" ]; then
                MATRIX_INCLUDE="$MATRIX_INCLUDE,"
              fi
              MATRIX_INCLUDE="$MATRIX_INCLUDE{\"dockerfile\":\"$dockerfile\"}"
            done
            
            echo "matrix={\"include\":[$MATRIX_INCLUDE]}" >> $GITHUB_OUTPUT
            echo "Changed Dockerfiles to build: ${CHANGED_DOCKERFILES[*]}"
          fi

  build-docker-images:
    needs: detect-changes
    if: needs.detect-changes.outputs.changed-dockerfiles != '[]'
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
      fail-fast: false
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.REGISTRY_USERNAME }}
          password: ${{ env.REGISTRY_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ matrix.dockerfile }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=${{ github.sha }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ matrix.dockerfile }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          # Build for linux/amd64 by default, add others as needed
          platforms: linux/amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: Image build summary
        run: |
          echo "‚úÖ Successfully built and pushed Docker image for: ${{ matrix.dockerfile }}"
          echo "üè∑Ô∏è  Tags: ${{ steps.meta.outputs.tags }}"
          echo "üì¶ Registry: ${{ env.REGISTRY }}"