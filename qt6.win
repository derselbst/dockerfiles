# escape=`

# Copyright (C) Microsoft Corporation. All rights reserved.
# Licensed under the MIT license. See LICENSE.txt in the project root for license information.

ARG FROM_IMAGE=mcr.microsoft.com/windows/servercore:ltsc2022
FROM ${FROM_IMAGE} AS buildtools

# Reset the shell.
SHELL ["cmd", "/S", "/C"]

# We must run as SYSTEM user, otherwise files are created with custom non-inherited permissions, causing the COPY steps below to fail with access denied
USER "NT AUTHORITY\SYSTEM"

# Set up environment to collect install errors.
COPY Install.cmd C:\TEMP\
ADD https://aka.ms/vscollect.exe C:\TEMP\collect.exe

# Install Node.js LTS
ADD https://nodejs.org/dist/v8.11.3/node-v8.11.3-x64.msi C:\TEMP\node-install.msi
RUN start /wait msiexec.exe /i C:\TEMP\node-install.msi /l*vx "%TEMP%\MSI-node-install.log" /qn ADDLOCAL=ALL

# Download channel for fixed install.
ARG CHANNEL_URL=https://aka.ms/vs/17/release.ltsc.17.2/channel
ADD ${CHANNEL_URL} C:\TEMP\VisualStudio.chman


ADD https://github.com/git-for-windows/git/releases/download/v2.34.1.windows.1/Git-2.34.1-64-bit.exe C:\TEMP\git-setup.exe
RUN C:\TEMP\git-setup.exe  /VERYSILENT /NORESTART /NOCANCEL /SP- /CLOSEAPPLICATIONS /RESTARTAPPLICATIONS /COMPONENTS="assoc,assoc_sh"


# Download and install Build Tools for Visual Studio 2022 for native desktop workload.
# https://docs.microsoft.com/de-de/visualstudio/releases/2022/release-history
ADD https://aka.ms/vs/17/release.ltsc.17.2/vs_buildtools.exe C:\TEMP\vs_buildtools.exe
RUN C:\TEMP\Install.cmd C:\TEMP\vs_buildtools.exe --quiet --wait --norestart --nocache `
    --channelUri C:\TEMP\VisualStudio.chman `
    --installChannelUri C:\TEMP\VisualStudio.chman `
    --add Microsoft.VisualStudio.Component.WinXP `
    --add Microsoft.VisualStudio.ComponentGroup.NativeDesktop.Core `
    --add Microsoft.VisualStudio.Component.Windows10SDK `
    --add Microsoft.VisualStudio.Workload.VCTools `
    --includeRecommended `
    --installPath C:\BuildTools

COPY ./certs/  ./certs/

# Filepath refers to the path of cert files inside the container's file system
RUN powershell Import-Certificate -FilePath .\certs\ZScaler-Root-CA.cer -CertStoreLocation Cert:\LocalMachine\Root
RUN powershell Import-Certificate -FilePath .\certs\ZScaler-Intermediate.cer -CertStoreLocation Cert:\LocalMachine\CA
# Confirming the installation of the certificate
RUN powershell ls Cert:\LocalMachine\Root

# configure git to use windows cert store, but doing so, may break curl...
# RUN git config --system http.sslBackend schannel

RUN git config --system http.sslBackend openssl

SHELL ["C:\\Program Files\\Git\\bin\\bash.exe", "-c"]
RUN "cat ./certs/ZScaler-Intermediate.cer ./certs/ZScaler-Root-CA.cer >> '/c/Program Files/Git/mingw64/ssl/certs/ca-bundle.crt'"
#RUN bash.exe -c "cat ./certs/ZScaler-Intermediate.cer ./certs/ZScaler-Root-CA.cer >> "/c/Program Files/Git/mingw64/ssl/certs/ca-bundle.crt""

SHELL ["cmd", "/S", "/C"]



FROM buildtools

ENV VCPKG_INSTALLATION_ROOT=C:\vcpkg
ENV VCPKG_REVISION=70f425a897fcde3783b86b39add480d6e663795f

RUN git config --global user.email "you@example.com"
RUN git config --global user.name "Your Name"
RUN git clone -n https://github.com/derselbst/vcpkg %VCPKG_INSTALLATION_ROOT%
WORKDIR ${VCPKG_INSTALLATION_ROOT}
RUN git checkout --force %VCPKG_REVISION%

RUN bootstrap-vcpkg.bat

ARG PLATFORM=x64
ENV VCPKG_MAX_CONCURRENCY=2

# tell vcpkg to only compile release package, not debug ones
RUN echo set(VCPKG_BUILD_TYPE release) >> triplets/%PLATFORM%-windows.cmake
RUN echo set(VCPKG_BUILD_TYPE release) >> triplets/%PLATFORM%-windows-static.cmake

RUN  vcpkg install --clean-after-build pkgconf:%PLATFORM%-windows-static

RUN  vcpkg install --clean-after-build libjpeg-turbo:%PLATFORM%-windows libjpeg-turbo:%PLATFORM%-windows-static

RUN  vcpkg install --clean-after-build tiff:%PLATFORM%-windows tiff:%PLATFORM%-windows-static 

RUN  vcpkg install --clean-after-build libraw:%PLATFORM%-windows libraw:%PLATFORM%-windows-static 

RUN  vcpkg install --clean-after-build libpng:%PLATFORM%-windows libpng:%PLATFORM%-windows-static

RUN  vcpkg install --clean-after-build brotli:x64-windows brotli:x64-windows-static

RUN  vcpkg install --clean-after-build libjxl:%PLATFORM%-windows libjxl:%PLATFORM%-windows-static

RUN  vcpkg install --clean-after-build exiv2:%PLATFORM%-windows exiv2:%PLATFORM%-windows-static

RUN  vcpkg install --clean-after-build zlib:%PLATFORM%-windows zlib:%PLATFORM%-windows-static

RUN  vcpkg install --clean-after-build libsndfile:%PLATFORM%-windows libsndfile:%PLATFORM%-windows-static

RUN  vcpkg install --clean-after-build libmad:%PLATFORM%-windows libmad:%PLATFORM%-windows-static

RUN  vcpkg install --clean-after-build ffmpeg:%PLATFORM%-windows ffmpeg:%PLATFORM%-windows-static

RUN  vcpkg install --clean-after-build libopenmpt:%PLATFORM%-windows libopenmpt:%PLATFORM%-windows-static

RUN  vcpkg install --clean-after-build portaudio:%PLATFORM%-windows portaudio:%PLATFORM%-windows-static 

RUN  vcpkg install --clean-after-build libebur128:%PLATFORM%-windows libebur128:%PLATFORM%-windows-static 

#RUN  vcpkg install --clean-after-build fluidsynth:%PLATFORM%-windows fluidsynth:%PLATFORM%-windows-static




